#!/usr/bin/env python
import os
from argparse import ArgumentParser

from cpp2py import make_cython_extention, Config


def parse_args():
    parser = ArgumentParser()
    parser.add_argument("header", nargs="+", type=str, help="C++ header files")
    parser.add_argument(
        "--sources", nargs="*", type=str, default=[], help="C++ implementation files"
    )
    parser.add_argument(
        "--modname",
        type=str,
        nargs="?",
        default=None,
        help="Name of the generated extension module",
    )
    parser.add_argument(
        "--outdir", type=str, nargs="?", default=".", help="output directory"
    )
    parser.add_argument(
        "--incdirs",
        type=str,
        nargs="*",
        default=[],
        help="Include directories for clang parser",
    )
    parser.add_argument(
        "--verbose", "-v", action="count", default=0, help="verbosity level"
    )
    parser.add_argument(
        "--clear",
        action="store_true",
        help="clear intermediate files after building successfully",
    )
    parser.add_argument(
        "--globals",
        type=str,
        default="cvar",
        help="name of the object that holds global variables and litral macros",
    )
    parser.add_argument("--nobuild", action="store_true")
    parser.add_argument("--genstub", action="store_true")
    parser.add_argument("--encoding", type=str, default="utf8")
    return parser.parse_args()


if __name__ == "__main__":
    args = parse_args()
    os.makedirs(args.outdir, exist_ok=True)
    config = Config(
        headers=args.header,
        modulename=args.modname,
        target=args.outdir,
        sources=args.sources,
        incdirs=args.incdirs,
        encoding=args.encoding,
        verbose=args.verbose,
        build=not args.nobuild,
        cleanup=args.clear,
        global_vars=args.globals,
        generate_stub=args.genstub,
    )
    make_cython_extention(config)
